// import spok from 'spok';
// import test, { Test } from 'tape';
// import { PublicKey } from '@solana/web3.js';
// import {
//   killStuckProcess,
//   ju
// } from '../../helpers';
// import { Subspace, toJuFile } from '@/index';

// killStuckProcess();

// // type TestProfileJsonMetadata<Uri = string> = {
// //   name?: string;
// //   description?: string;
// //   image?: Uri
// //   avatar?: Uri;
// // };

// test('[Setup]', async () => {

//   const jp = await ju();

//   /** App */
//   const appName = 'TestApp'
//   const appAuthority = jp.identity().publicKey;
//   const appPda = jp.core().pdas().app({ appName });

//   /** Profiles */
//   const alice = {
//     ju: await ju(),
//     name: 'alice',
//     status: null,
//     json: {
//       name: 'Alice',
//       description: 'Alise is the 1st test user',
//       image: toJuFile('alice_image', 'alice-image.jpg'),
//       avatar: toJuFile('alice_avatar', 'alice-avatar.jpg'),
//     },
//     subspaceAlias: 'aliceteam',
//     subspaceJson: {
//       name: 'Alice Friends group',
//       description: 'Alise official subspace',
//       image: toJuFile('alice_subspace_image', 'alice-subspace-image.jpg'),
//       avatar: toJuFile('alice_subspace_avatar', 'alice-subspace-avatar.jpg'),
//     }
//   }
//   const bob = {
//     ju: await ju(),
//     name: 'bobb',
//     status: 'Hey there!',
//     json: {
//       name: 'Bob',
//       description: 'Bob is the 2nd test user',
//       image: toJuFile('bob_image', 'bob-image.jpg'),
//     }
//   }
//   const konrad = {
//     ju: await ju(),
//     name: 'konrad',
//     status: 'LFG!!!',
//     json: {
//       name: 'Konrad',
//       description: 'Konrad is the 3nd test user',
//       image: toJuFile('konrad_image', 'konrad-image.jpg'),
//     }
//   }

//   let subspace1 = PublicKey.default;
//   let publication1 = PublicKey.default;
//   let publication2 = PublicKey.default;
//   // let publication3 = PublicKey.default;
//   // let publication4 = PublicKey.default;

//   const publicationReportString = 'Publication report test reason';
//   const subspaceReportString = 'Subspace report test reason';
//   const profileReportString = 'Profile report test reason';

//   test('[App]', async () => {
//     test('[Create] it can create an App', async (t: Test) => {

//       // Upload some metadata containing an image.
//       const { uri } = await jp.storage().uploadMetadata({
//         name: 'JSON App name',
//         description: 'JSON App description',
//         image: toJuFile('app_image', 'app-image.jpg'),
//       });

//       // Create a new App with minimum configuration.
//       const {
//         app
//       } = await jp.core().createApp(
//         {
//           appName,
//           data: {
//             metadataUri: uri,

//             profileNameRequired: true,
//             profileSurnameRequired: true,
//             profileBirthdateRequired: true,
//             profileCountryRequired: false,
//             profileCityRequired: false,
//             profileMetadataUriRequired: true,

//             subspaceNameRequired: true,
//             subspaceMetadataUriRequired: true,

//             profileDeleteAllowed: false,
//             subspaceDeleteAllowed: false,
//             publicationDeleteAllowed: false,
//           },
//           externalProcessors: {
//             registeringProcessor: null,
//             connectingProcessor: null,
//             publishingProcessor: null,
//             collectingProcessor: null,
//             referencingProcessor: null,
//           }
//         }
//       );


//       spok(t, app.data, {
//         $topic: 'App test',
//         appName: 'TestApp',
//         authority: jp.identity().publicKey,
//         metadataUri: uri,
//         registeringProcessor: null,
//         connectingProcessor: null,
//         publishingProcessor: null,
//         collectingProcessor: null,
//         referencingProcessor: null
//       });
//     });

//     test('[Update] it can update an existing App', async (t: Test) => {

//       const updatedUri = 'https://example.com/app-updated-uri'

//       // Update an existing App.
//       const {
//         app
//       } = await jp.core().updateApp({
//         app: appPda,
//         data: {
//           metadataUri: updatedUri,

//           profileNameRequired: true,
//           profileSurnameRequired: true,
//           profileBirthdateRequired: true,
//           profileCountryRequired: false,
//           profileCityRequired: false,
//           profileMetadataUriRequired: true,

//           subspaceNameRequired: true,
//           subspaceMetadataUriRequired: true,

//           profileDeleteAllowed: true,
//           subspaceDeleteAllowed: true,
//           publicationDeleteAllowed: true,
//         },
//         externalProcessors: {
//           registeringProcessor: null,
//           connectingProcessor: null,
//           publishingProcessor: null,
//           collectingProcessor: null,
//           referencingProcessor: null,
//         }
//       });

//       // And we get the same data when fetching a fresh instance of that App.
//       const retrievedApp = await jp
//         .core()
//         .app(app.address);

//       spok(t, retrievedApp.data, {
//         $topic: 'App test',
//         appName: 'TestApp',
//         authority: appAuthority,
//         metadataUri: updatedUri,
//         registeringProcessor: null,
//         connectingProcessor: null,
//         publishingProcessor: null,
//         collectingProcessor: null,
//         referencingProcessor: null
//       });
//     });
//   })

//   test('[Profiles]', async () => {

//     const updatedAlias1 = 'updatedAlias1';
//     const updatedAlias2 = 'updatedAlias2';

//     test('[Create] it can create Profile 1 (Alice)', async (t: Test) => {

//       // Upload some metadata containing an image.
//       const aliceMetadata = alice.json;
//       const { uri, assetUris, metadata } = await alice.ju.storage().uploadMetadata(aliceMetadata);

//       console.log('Alice uri :>> ', uri);
//       console.log('Alice assetUris :>> ', assetUris);
//       console.log('Alice metadata :>> ', metadata);

//       t.comment(`Alice metadata Avatar : ${metadata.avatar}`);

//       // Create a new App Profile.
//       const { profile } = await alice.ju.core().createProfile(
//         {
//           app: appPda,
//           data: {
//             alias: alice.name,
//             metadataUri: uri,
//             statusText: alice.status,
//             name: null,
//             surname: null,
//             birthDate: null,
//             countryCode: null,
//             cityCode: null,
//             currentLocation: null,
//             connectingProcessorToAssign: null
//           }
//         }
//       );

//       t.equal(profile.data.app.toBase58(), appPda.toBase58())

//       // profileClient.metadataJson()

//       spok(t, profile.data, {
//         $topic: 'Profile 1 test',
//         alias: alice.name,
//         metadataUri: uri,
//         statusText: alice.status,
//         authority: alice.ju.identity().publicKey,
//         connectingProcessor: null,
//       });

//     });

//     test('[Create] it can create Profile 2 (BOob)', async (t: Test) => {

//       // Upload some metadata containing an image.
//       const { uri } = await bob.ju.storage().uploadMetadata(bob.json);
//       // console.log('Bob uri :>> ', uri);

//       // Create a new App Profile.
//       const { profile } = await bob.ju.core().createProfile(
//         {
//           app: appPda,
//           data: {
//             alias: bob.name,
//             metadataUri: uri,
//             statusText: bob.status,
//             name: null,
//             surname: null,
//             birthDate: null,
//             countryCode: null,
//             cityCode: null,
//             currentLocation: null,
//             connectingProcessorToAssign: null
//           }
//         }
//       );

//       t.equal(profile.data.app.toBase58(), appPda.toBase58())

//       spok(t, profile.data, {
//         $topic: 'Profile 2 test',
//         alias: bob.name,
//         metadataUri: uri,
//         statusText: bob.status,
//         authority: bob.ju.identity().publicKey,
//         connectingProcessor: null,
//       });
//     });

//     test('[Create] it can create Profile 3 (Konrad)', async (t: Test) => {

//       // Upload some metadata containing an image.
//       const { uri } = await konrad.ju.storage().uploadMetadata(konrad.json);
//       // console.log('Konrad uri :>> ', uri);

//       // Create a new App Profile.
//       const { profile } = await konrad.ju.core().createProfile(
//         {
//           app: appPda,
//           data: {
//             alias: konrad.name,
//             metadataUri: uri,
//             statusText: konrad.status,
//             name: null,
//             surname: null,
//             birthDate: null,
//             countryCode: null,
//             cityCode: null,
//             currentLocation: null,
//             connectingProcessorToAssign: null
//           }
//         }
//       );

//       t.equal(profile.data.app.toBase58(), appPda.toBase58())

//       spok(t, profile.data, {
//         $topic: 'Profile 3 test',
//         alias: konrad.name,
//         metadataUri: uri,
//         statusText: konrad.status,
//         authority: konrad.ju.identity().publicKey,
//         connectingProcessor: null,
//       });
//     });

//     test('[Update] it can delete Alias for Profile 1 (Alice)', async (t: Test) => {

//       // Upload another metadata (from Konrad)
//       const { uri } = await alice.ju.storage().uploadMetadata(konrad.json);
//       // console.log('Konrad uri :>> ', uri);

//       // Update Status
//       const { profile } = await alice.ju.core().updateProfile(
//         {
//           app: appPda,
//           data: {
//             alias: null,
//             metadataUri: uri,
//             statusText: alice.status,
//             name: null,
//             surname: null,
//             birthDate: null,
//             countryCode: null,
//             cityCode: null,
//             currentLocation: null,
//             connectingProcessorToAssign: null
//           },
//           currentAlias: alice.name,
//           externalProcessors: {}
//         }
//       );

//       t.equal(profile.data.app.toBase58(), appPda.toBase58())

//       spok(t, profile.data, {
//         $topic: 'Profile 1 Update test',
//         alias: null,
//         metadataUri: uri,
//         statusText: alice.status,
//         authority: alice.ju.identity().publicKey,
//         connectingProcessor: null,
//       });
//     });


//     test('[Update] it can register Alias for Profile 1 (Alice)', async (t: Test) => {

      

//       // Upload another metadata (from Konrad)
//       const { uri } = await alice.ju.storage().uploadMetadata(konrad.json);
//       // console.log('Konrad uri :>> ', uri);

//       // Update Status
//       const { profile } = await alice.ju.core().updateProfile(
//         {
//           app: appPda,
//           data: {
//             alias: updatedAlias1,
//             metadataUri: uri,
//             statusText: alice.status,
//             name: null,
//             surname: null,
//             birthDate: null,
//             countryCode: null,
//             cityCode: null,
//             currentLocation: null,
//             connectingProcessorToAssign: null
//           },
//           currentAlias: null,
//           externalProcessors: {}
//         }
//       );

//       t.equal(profile.data.app.toBase58(), appPda.toBase58())

//       spok(t, profile.data, {
//         $topic: 'Profile 1 Update test',
//         alias: updatedAlias1,
//         metadataUri: uri,
//         statusText: alice.status,
//         authority: alice.ju.identity().publicKey,
//         connectingProcessor: null,
//       });
//     });


//     test('[Update] it can update status text and Alias for Profile 1 (Alice)', async (t: Test) => {

//       const updatedStatusText = 'updated status text';

//       // Upload another metadata (from Konrad)
//       const { uri } = await alice.ju.storage().uploadMetadata(konrad.json);
//       // console.log('Konrad uri :>> ', uri);

//       // Update Status
//       const { profile } = await alice.ju.core().updateProfile(
//         {
//           app: appPda,
//           data: {
//             alias: updatedAlias2,
//             metadataUri: uri,
//             statusText: updatedStatusText,
//             name: null,
//             surname: null,
//             birthDate: null,
//             countryCode: null,
//             cityCode: null,
//             currentLocation: null,
//             connectingProcessorToAssign: null
//           },
//           currentAlias: updatedAlias1,
//           externalProcessors: {}
//         }
//       );

//       t.equal(profile.data.app.toBase58(), appPda.toBase58())

//       spok(t, profile.data, {
//         $topic: 'Profile 1 Update test',
//         alias: updatedAlias2,
//         metadataUri: uri,
//         statusText: updatedStatusText,
//         authority: alice.ju.identity().publicKey,
//         connectingProcessor: null,
//       });
//     });


//     test('[Connect] user Bob can connect to Konrad', async (t: Test) => {

//       // Create new Connection (subscribe to Alice group).
//       const { response } = await bob.ju.core().createConnection(
//         {
//           app: appPda,
//           target: konrad.ju.core().pdas().profile({ app: appPda })
//         }
//       );

//       t.comment(`tx signature: ${response.signature}`);
//     });

//     test('[Connect] user Alice can connect to Konrad', async (t: Test) => {

//       // Create new Connection (subscribe to Alice group).
//       const { response } = await alice.ju.core().createConnection(
//         {
//           app: appPda,
//           target: konrad.ju.core().pdas().profile({ app: appPda })
//         }
//       );

//       t.comment(`tx signature: ${response.signature}`);
//     });

//     test('[Connect] user Alice can connect to Bob', async (t: Test) => {

//       // Create new Connection (subscribe to Alice group).
//       const { response } = await alice.ju.core().createConnection(
//         {
//           app: appPda,
//           target: bob.ju.core().pdas().profile({ app: appPda })
//         }
//       );

//       t.comment(`tx signature: ${response.signature}`);
//     });

//     test('[Approve] Konrad can approve Alice Connection', async (t: Test) => {

//       // Create new Connection (subscribe to Alice group).
//       const { response } = await konrad.ju.core().updateConnection(
//         {
//           app: appPda,
//           initializer: alice.ju.core().pdas().profile({ app: appPda }),
//           target: konrad.ju.core().pdas().profile({ app: appPda }),
//           approveStatus: true
//         }
//       );

//       t.comment(`tx signature: ${response.signature}`);
//     });
//   })

//   test('[Subspaces]', async () => {
//     test('[Create] it can create Subspace 1 (Alice group)', async (t: Test) => {

//       // Upload some metadata containing an image.
//       const subspaceMetadata = alice.subspaceJson;
//       const { uri, assetUris, metadata } = await alice.ju.storage().uploadMetadata(subspaceMetadata);

//       console.log('Alice Subspace uri :>> ', uri);
//       console.log('Alice Subspace assetUris :>> ', assetUris);
//       console.log('Alice Subspace metadata :>> ', metadata);
//       t.comment(`Alice Subspace metadata Avatar : ${metadata.avatar}`);

//       // Create a new App Profile.
//       const { subspace } = await alice.ju.core().createSubspace(
//         {
//           app: appPda,
//           alias: alice.subspaceAlias,
//           metadataUri: uri,
//         }
//       );

//       t.equal(subspace.data.app.toBase58(), appPda.toBase58())

//       // profileClient.metadataJson()

//       spok(t, subspace.data, {
//         $topic: 'Subspace 1 test',
//         alias: alice.subspaceAlias,
//         metadataUri: uri,
//         authority: alice.ju.identity().publicKey,
//         collectingProcessor: null,
//       });

//       subspace1 = subspace.address;

//     });

//     test('[Subscribe] user Bob can connect to Subspace 1', async (t: Test) => {

//       // Create new Connection (subscribe to Alice group).
//       const { response } = await bob.ju.core().createConnection(
//         {
//           app: appPda,
//           target: subspace1
//         }
//       );

//       t.comment(`tx signature: ${response.signature}`);

//       // t.equal(subspaceClient.data.app.toBase58(), appPda.toBase58())


//     });

//     test('[Subscribe] user Konrad can connect to Subspace 1', async (t: Test) => {

//       // Create new Connection (subscribe to Alice group).
//       const { response } = await konrad.ju.core().createConnection(
//         {
//           app: appPda,
//           target: subspace1
//         }
//       );

//       t.comment(`tx signature: ${response.signature}`);

//       // t.equal(subspaceClient.data.app.toBase58(), appPda.toBase58())


//     });

//     test('[Approve] Alice can approve Konrad Subspace subscribtion', async (t: Test) => {

//       // Update Connection (Approve suscriber).
//       const { response } = await alice.ju.core().updateConnection(
//         {
//           app: appPda,
//           initializer: konrad.ju.core().pdas().profile({ app: appPda }),
//           target: subspace1,
//           approveStatus: true
//         }
//       );

//       t.comment(`tx signature: ${response.signature}`);
//     });

//   })


//   test('[Publications]', async () => {

//     test('[Create] it can create Publication1', async (t: Test) => {

//       // Upload some metadata containing an image.
//       // const subspaceMetadata = alice.subspaceJson;
//       // const { uri, assetUris, metadata } = await alice.ju.storage().uploadMetadata(subspaceMetadata);

//       const uri = 'test-uri';

//       // Create a new App Profile.
//       const { publication } = await alice.ju.core().createPublication(
//         {
//           app: appPda,
//           metadataUri: uri,
//         }
//       );

//       // console.log('Publication data: :>> ', publication.data);

//       t.equal(publication.data.app.toBase58(), appPda.toBase58())

//       // profileClient.metadataJson()

//       spok(t, publication.data, {
//         $topic: 'Publication test',
//         isMirror: false,
//         isReply: false,
//         subspace: null,
//         contentType: 0,
//         tag: null,
//         metadataUri: uri,
//         authority: alice.ju.identity().publicKey,
//         collectingProcessor: null,
//       });

//       publication1 = publication.address;

//     });

//     test('[Create] it can create Publication1 Reply', async (t: Test) => {

//       const uri = 'reply-test-uri';

//       // Create a new App Profile.
//       const { publication } = await bob.ju.core().createPublication(
//         {
//           app: appPda,
//           isReply: true,
//           target: publication1,
//           metadataUri: uri,
//         }
//       );

//       // console.log('Publication data: :>> ', publication.data);

//       t.equal(publication.data.app.toBase58(), appPda.toBase58());
//       t.equal(publication.data.targetPublication?.toBase58(), publication1.toBase58())

//       // profileClient.metadataJson()

//       spok(t, publication.data, {
//         $topic: 'Publication test',
//         isMirror: false,
//         isReply: true,
//         subspace: null,
//         contentType: 0,
//         tag: null,
//         metadataUri: uri,
//         authority: bob.ju.identity().publicKey,
//         collectingProcessor: null,
//       });

//     });

//     test('[Create] it can create Publication2 into Subspace1', async (t: Test) => {

//       const uri = 'http://example.com/subspace-publication-2-uri';
//       const tag = 'solanax100';

//       // Create a new App Profile.
//       const { publication } = await alice.ju.core().createPublication(
//         {
//           app: appPda,
//           metadataUri: uri,
//           subspace: subspace1,
//           tag
//         }
//       );

//       publication2 = publication.address;

//       console.log('Publication data: :>> ', publication.data);

//       t.equal(publication.address.toBase58(), publication2.toBase58(), 'Publication public key');
//       t.equal(publication.data.app.toBase58(), appPda.toBase58(), 'App');
//       t.equal(publication.data.subspace?.toBase58(), subspace1.toBase58(), 'Subspace');
//       t.equal(publication.data.metadataUri, uri, 'URI');
//       t.equal(publication.data.tag, tag, 'Tag');


//     });

//   })


//   test('[Reactions]', async () => {

//     test('[Create] Bob can create Reaction to Publication1', async (t: Test) => {

//       // Create a new Reaction
//       const { response } = await bob.ju.core().createReaction(
//         {
//           app: appPda,
//           target: publication1,
//           reactionType: 0,
//         }
//       );

//       t.comment(`Response - ${response.signature}`);

//     });

//     test('[Create] Konrad can create Reaction to Publication1', async (t: Test) => {

//       // Create a new Reaction
//       const { response } = await konrad.ju.core().createReaction(
//         {
//           app: appPda,
//           target: publication1,
//           reactionType: 0,
//         }
//       );

//       t.comment(`Response - ${response.signature}`);

//     });

//   });


//   test('[Reports]', async () => {

//     test('[Create] Konrad can create Report to Publication1', async (t: Test) => {

//       // Create a new Reaction
//       const { response } = await bob.ju.core().createReport(
//         {
//           app: appPda,
//           target: publication1,
//           reportType: 0,
//           notificationString: publicationReportString
//         }
//       );

//       t.comment(`Response - ${response.signature}`);

//     });

//     test('[Create] Alice can create Report to Konrads Profile', async (t: Test) => {

//       // Create a new Reaction
//       const { response } = await alice.ju.core().createReport(
//         {
//           app: appPda,
//           target: konrad.ju.core().pdas().profile({ app: appPda }),
//           reportType: 1,
//           notificationString: profileReportString
//         }
//       );

//       t.comment(`Response - ${response.signature}`);

//     });

//     test('[Create] Bob can create Report to Alice Group', async (t: Test) => {

//       // Create a new Reaction
//       const { response } = await alice.ju.core().createReport(
//         {
//           app: appPda,
//           target: subspace1,
//           reportType: 0,
//           notificationString: subspaceReportString
//         }
//       );

//       t.comment(`Response - ${response.signature}`);

//     });

//   });


//   test('[Query Entities]', async () => {

//     test('[Fetch] it can find single Application Profile with Metadata', async (t: Test) => {

//       // Fetch Profile.
//       const profile = await alice.ju.core().findProfileByAddress(
//         {
//           profile: alice.ju.core().pdas().profile({ app: appPda })
//         }
//       );

//       t.comment(`Profile: ${profile.address}`);

//       // spok(t, profileClient.data, {
//       //   $topic: 'Profile 1 test',
//       //   alias: alice.name,
//       //   metadataUri: uri,
//       //   statusText: alice.status,
//       //   authority: alice.ju.identity().publicKey,
//       //   connectingProcessor: null,
//       // });
//     });

//     test('[Query] it can find all Application Profiles', async (t: Test) => {

//       // Create a new App Profile.
//       const profiles = await alice.ju.core().findAllProfiles(
//         {
//           app: appPda,
//           loadJsonMetadata: true
//         }
//       );

//       t.equal(profiles.length, 3);
//       // console.log(profiles);

//       // spok(t, profileClient.data, {
//       //   $topic: 'Profile 1 test',
//       //   alias: alice.name,
//       //   metadataUri: uri,
//       //   statusText: alice.status,
//       //   authority: alice.ju.identity().publicKey,
//       //   connectingProcessor: null,
//       // });
//     });

//     test('[Query] it can find all Subspace 1 (Alice group) subscribers', async (t: Test) => {

//       let subspaceList: Subspace[] = [];
//       // Retrieve all Subspaces
//       try {
//         subspaceList = await konrad.ju.core().findAllSubspaces(
//           {
//             app: appPda,
//             loadJsonMetadata: true
//           }
//         );
//       } catch (error) {
//         console.log('error :>> ', error);
//       }

//       // Create a new App Profile.
//       const profiles = await alice.ju.core().findAllProfilesByConnectionTarget(
//         {
//           app: appPda,
//           target: subspaceList[0].address
//         }
//       );

//       t.equal(profiles.length, 2);
//       // console.log(profiles);
//     });

//     test('[Query] it can find Approved Subspace 1 (Alice group) subscribers', async (t: Test) => {

//       // Create a new App Profile.
//       const profiles = await alice.ju.core().findAllProfilesByConnectionTarget(
//         {
//           app: appPda,
//           target: subspace1,
//           approved: true
//         }
//       );

//       t.equal(profiles.length, 1);
//       t.equal(profiles[0].address.toBase58(), konrad.ju.core().pdas().profile({ app: appPda }).toBase58());

//     });

//     test('[Query] it can find all Alice friends (connections as initializer)', async (t: Test) => {

//       // Create a new App Profile.
//       const profiles = await alice.ju.core().findAllProfilesByConnectionInitializer(
//         {
//           app: appPda,
//           initializer: alice.ju.core().pdas().profile({ app: appPda })
//         }
//       );

//       t.equal(profiles.length, 2);
//       // console.log(profiles);
//     });

//     test('[Fetch] it can find Entity by Alias name', async (t: Test) => {

//       // Fetch Profile.
//       const result = await konrad.ju.core().findEntityByAliasValue(
//         {
//           app: appPda,
//           alias: konrad.name
//         }
//       );

//       t.comment(`Entity - ${result ? result.address : 'not found'}`);
//       t.equal(result?.data.alias, konrad.name)

//       // spok(t, result?.data, {
//       //   $topic: 'Entity test',
//       //   alias: alice.name,
//       //   authority: alice.ju.identity().publicKey,
//       // });
//     });

//     test('[Fetch] it can NOT find Entity by nonexistent Alias name', async (t: Test) => {

//       // Fetch Profile.
//       const result = await konrad.ju.core().findEntityByAliasValue(
//         {
//           app: appPda,
//           alias: 'nonexistalias'
//         }
//       );

//       t.comment(`Entity - ${result ? result.address : 'not found'}`);
//       t.equal(result, null)
//     });

//     test('[Reactions Fetch] it can find All Publication reactions', async (t: Test) => {

//       // Fetch Profile.
//       const result = await konrad.ju.core().findEntityByAliasValue(
//         {
//           app: appPda,
//           alias: 'nonexistalias'
//         }
//       );

//       t.comment(`Entity - ${result ? result.address : 'not found'}`);
//       t.equal(result, null)
//     });

//   });

// })