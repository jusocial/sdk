// import cloneDeep from 'lodash.clonedeep';
// import { AppJsonMetadata, ProfileJsonMetadata, PublicationJsonMetadata, SubspaceJsonMetadata } from '../models';
// import { isJuFile, JuFile } from '../../storageModule';
// import { Ju } from '@/Ju';
// import {
//   Operation,
//   OperationHandler,
//   OperationScope,
//   useOperation,
// } from '@/types';
// import { walk } from '@/utils';

// // -----------------
// // Operation
// // -----------------

// const Key = 'UploadMetadataOperation' as const;

// /**
//  * Uploads a JSON Metadata object to the current storage provider.
//  *
//  * ```ts
//  * const { uri } = await ju
//  *   .core()
//  *   .uploadMetadata({
//  *     uri: "https://example.com/metadata-uri",
//  *   };
//  * ```
//  *
//  * @group Operations
//  * @category Constructors
//  */
// export const uploadMetadataOperation =
//   useOperation<UploadMetadataOperation>(Key);

// /**
//  * @group Operations
//  * @category Types
//  */
// export type UploadMetadataOperation = Operation<
//   typeof Key,
//   UploadMetadataInput,
//   UploadMetadataOutput
// >;

// /**
//  * @group Operations
//  * @category Inputs
//  */
// export type UploadMetadataInput = AppJsonMetadata <JuFile | string> | ProfileJsonMetadata <JuFile | string> | SubspaceJsonMetadata <JuFile | string> | PublicationJsonMetadata <JuFile | string>;
// /**
//  * @group Operations
//  * @category Outputs
//  */
// export type UploadMetadataOutput = {
//   /** The uploaded JSON metadata. */
//   metadata: AppJsonMetadata | ProfileJsonMetadata | SubspaceJsonMetadata | PublicationJsonMetadata;

//   /**
//    * The URIs of all assets that were uploaded
//    * within the provided metadata.
//    */
//   assetUris: string[];

//   /** The URI of the uploaded JSON metadata. */
//   uri: string;
// };

// /**
//  * @group Operations
//  * @category Handlers
//  */
// export const uploadMetadataOperationHandler: OperationHandler<UploadMetadataOperation> =
//   {
//     handle: async (
//       operation: UploadMetadataOperation,
//       ju: Ju,
//       scope: OperationScope
//     ): Promise<UploadMetadataOutput> => {
//       const rawMetadata = operation.input;
//       const files = getAssetsFromJsonMetadata(rawMetadata);
//       const assetUris = await ju.storage().uploadAll(files);
//       scope.throwIfCanceled();

//       const metadata = replaceAssetsWithUris(rawMetadata, assetUris);
//       const uri = await ju.storage().uploadJson(metadata);

//       return { uri, metadata, assetUris };
//     },
//   };

// const getAssetsFromJsonMetadata = (
//   input: UploadMetadataInput
// ): JuFile[] => {
//   const files: JuFile[] = [];

//   walk(input, (next, value) => {
//     if (isJuFile(value)) {
//       files.push(value);
//     } else {
//       next(value);
//     }
//   });

//   return files;
// };

// const replaceAssetsWithUris = <JsonMetadata extends AppJsonMetadata | ProfileJsonMetadata | SubspaceJsonMetadata | PublicationJsonMetadata>(
//   input: UploadMetadataInput,
//   replacements: string[]
// ): JsonMetadata => {
//   const clone = cloneDeep(input);
//   let index = 0;

//   walk(clone, (next, value, key, parent) => {
//     if (isJuFile(value)) {
//       if (index < replacements.length) {
//         parent[key] = replacements[index++];
//       }
//     } else {
//       next(value);
//     }
//   });

//   return clone as JsonMetadata;
// };
